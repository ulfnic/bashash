#!/usr/bin/env bash
# License: GNU Affero General Public License Version 3 (GNU AGPLv3), (c) 2023, Marc Gilligan <marcg@ulfnic.com>


bashash__help_doc (){
	cat <<-'HelpDoc' 1>&2
		# Options:
		  # Special:
		    -h|--help                      # Optional: Output help
		    -b|--checksum-bytes            # Optional: (default: 16) Size of the checksum in bytes
		    --                             # Optional: End processing of options

		  # Input:
		    -t|--text STRING               # Optional: Use STRING as input
		    -n|--input-nameref VAR_NAME    # Optional: Input from variable VAR_NAME (source-dep)
		    INPUT_FILE                     # Optional: Read input from INPUT_FILE
		    -                              # Optional: Read input from stdin

		  # Output:
		    -N|--output-nameref VAR_NAME   # Optional: Output to variable VAR_NAME (source-dep)
		    -v|--output-as-var             # Optional: Output to variable bashash__output (source-dep)

		  # (source-dep) means the script must be sourced to use this feature

		# Examples:
		  # Sourced or as a standalone executable:
		    bashash ./file.txt

		    printf '%s' 'Some Text' | bashash -

		  # Sourced:
		    text_str='Some Text'
		    bashash --input-nameref 'text_str'

		    bashash__input='Some Text' bashash__checksum_bytes=8 bashash__main
		    printf '%s\n' "$bashash__output"

	HelpDoc
}



bashash() {
	local \
		bashash__input \
		bashash__checksum_bytes \
		output_as_var

	# Clear output variable to avoid false positives
	bashash__output=

	read_input_file() {
		[[ -r $1 ]] && read -d '' bashash__input < "$1" && return 0
		printf '%s\n' 'ERROR: bashash, failed to read file: '"$1" 1>&2
		return 1
	}

	if [[ ! $1 ]]; then
		bashash__help_doc
		return 0
	fi

	while [[ $1 ]]; do
		case $1 in
			'--')
				shift; break ;;

			'-')
				read -d '' bashash__input
				shift; continue ;;

			'--text'|'-t')
				bashash__input=$2
				shift 2; continue ;;

			'--input-nameref'|'-n')
				local -n bashash__input=$2
				output_as_var=1
				shift 2; continue ;;

			'--output-nameref'|'-N')
				local -n bashash__output=$2
				output_as_var=1
				shift 2; continue ;;

			'--output-as-var'|'-v')
				output_as_var=1
				shift; continue ;;

			'--checksum-bytes'|'-b')
				bashash__checksum_bytes=$2
				shift 2; continue ;;

			'--help'|'-h')
				bashash__help_doc
				return 0 ;;

			'-'*)
				printf '%s\n' 'ERROR: bashash, unrecognized parameter: '"$1" 1>&2
				return 1 ;;

			*)
				read_input_file "$1" || return $?
				shift; continue ;;
		esac
	done

	while [[ $1 ]]; do
		read_input_file "$1" || return $?
		shift
	done

	# Variables are set, create checksum
	bashash__main

	# Return early if the output method is a variable, otherwise print and unset it
	[[ $output_as_var ]] && return 0

	printf '%s\n' "$bashash__output"
	unset bashash__output
}



bashash__main() {
	: ${bashash__checksum_bytes:=16}
	local \
		input_len=${#bashash__input} \
		checksum_arr=() \
		i i2 dec_int

	# Clear output variable to avoid false positives
	bashash__output=

	[[ $input_len == '0' ]] && return 1

	# Iterate through each character of the input
	for (( i = 0; i < input_len; i++ )); do

		# Convert character into a signed decimal integer
		printf -v dec_int '%d' "'${bashash__input:i:1}"

		# Prevent non-interacting values of 0
		(( dec_int++ ))

		# Additively cascade the value of dec_int through the array checksum_arr
		# using a modulo operation at each step to confine the result to the numerical
		# representation of one byte and avoid arithmetic evaluation memory limits.
		checksum_arr[0]=$(( ( checksum_arr[0] + dec_int ) % 254 ))
		for (( i2 = 1; i2 < bashash__checksum_bytes; i2++ )); do
			checksum_arr[i2]=$(( ( checksum_arr[i2] + checksum_arr[i2-1] ) % 254 ))
		done
	done

	# Convert to hex
	printf -v bashash__output '%02x' "${checksum_arr[@]}"
}



# If executed directly (not sourced), pass parameters and stdin to function bashash
if [[ ${BASH_SOURCE[0]} == "${0}" ]]; then
	set -o errexit
	{ bashash "$@"; } < /dev/fd/0 || exit $?
fi



